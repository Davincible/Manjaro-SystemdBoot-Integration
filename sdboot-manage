#! /bin/bash
#CUSTOM
# sdboot-manage provides automation for systemd-boot on systems with multiple kernels

config=/etc/sdboot-manage.conf
bootctl=/usr/bin/bootctl

# config variables
export  LINUX_OPTIONS \
        LINUX_FALLBACK_OPTIONS \
        LINUX_USE_SWAP_FOR_RESUME \
        DEFAULT_ENTRY="latest" \
        ENTRY_ROOT="manjarolinux" \
        ENTRY_TITLE="Manjaro Linux" \
        ENTRY_APPEND_KVER="yes" \
        KERNEL_PATTERN="vmlinuz-[0-9]*-*" \
        REMOVE_EXISTING="yes" \
        OVERWRITE_EXISTING \
        REMOVE_OBSOLETE="yes" \
        PRESERVE_FOREIGN \
        NO_AUTOGEN \
        NO_AUTOUPDATE \
        CDISCARD \
        DISCARD 

# Load the config file
[[ -f ${config} ]] && . "${config}"

usage() {
    echo "Usage: sdboot-manage [action]"
    echo ""
    echo "Actions:"
    echo "  gen     generates entries for systemd-boot based on installed kernels"
    echo "  remove  removes orphaned systemd-boot entries"
    echo "  setup   installs systemd-boot and generate initial entries"
    echo "  update  updates systemd-boot"
    exit 1
}

get_entry_root() {
    echo -n "$1/loader/entries/${ENTRY_ROOT}"
    if [[ ${ENTRY_APPEND_KVER,,} == "yes" ]]; then
        echo -n "$2"
    fi
}

# removes a systemd-boot entry
remove_entry() {
    [[ ${1} =~ ^$(get_entry_root "${esp}").* || ${PRESERVE_FOREIGN} != "yes" ]] && rm "$1"
}

# installs and configures systemd-boot
setup_sdboot() {
    if $bootctl status &> /dev/null; then
        echo -e "systemd-boot already installed"
        exit 1
    else
        # install systemd-boot letting it detect esp
        $bootctl install

        # create a simple loader.conf
        esp=$(bootctl -p)
        echo "timeout 3" > "${esp}/loader/loader.conf"

        # generate entries, ensure an initial set of entries is generated
        [[ ${DEFAULT_ENTRY} != "oldest" ]] && DEFAULT_ENTRY="latest"
        generate_entries
    fi
}

generate_entries() {
    # get the esp path
    esp=$(bootctl -p)
    root='/'

    echo "Generating ..."

    # First, ensure we have a valid config
    if [[ -f ${esp}/loader/loader.conf ]]; then
        # only build entries if there is some place to put them
        if [[ -d ${esp}/loader/entries ]]; then
            srcdev=$(findmnt -no SOURCE ${root})
            srcdev_uuid=$(findmnt -no UUID ${root})
            srcdev_partuuid=$(findmnt -no PARTUUID ${root})
            srcdev_fsroot=$(findmnt -no FSROOT ${root})
            root_fstype=$(findmnt -no FSTYPE ${root})

            # generate an appropriate options line
            case ${root_fstype} in
                zfs)
                    sdoptions="zfs=${srcdev} rw"
                    ;;
                btrfs)
                    if [[ -n ${srcdev_uuid} ]]; then
                        sdoptions="root=UUID=${srcdev_uuid} rw rootflags=subvol=${srcdev_fsroot}"
                    else
                        sdoptions="root=PARTUUID=${srcdev_partuuid} rw rootflags=subvol=${srcdev_fsroot}"
                    fi
                    if [[ ${CDISCARD,,} == "yes" ]]; then
                        sdoptions="${sdoptions},discard"
                    fi
                    ;;
                *)
                    if [[ -n ${srcdev_uuid} ]]; then
                        sdoptions="root=UUID=${srcdev_uuid} rw"
                    elif [[ -n ${srcdev_partuuid} ]]; then
                        sdoptions="root=PARTUUID=${srcdev_partuuid} rw"
                    else
                        sdoptions="root=${srcdev} rw"
                    fi
                    if [[ ${CDISCARD,,} == "yes" ]]; then
                        sdoptions="${sdoptions} rootflags=discard"
                    fi
                    ;;
            esac

            # Search for a crypt device

            # get the UUID for the crypt root - requires special handling for zfs
            if [[ ${root_fstype} == "zfs" ]]; then
                zpool=${srcdev%%/*}
                zpool_device=$(zpool status -LP ${zpool} | grep "/dev/" | awk '{print $1}')
                top_level_uuid=$(lsblk -no UUID ${zpool_device})
            else
                top_level_uuid=${srcdev_uuid}
            fi

            # now that we have the UUID search all the devices above it to find a cryptroot
            while read -r devname devtype; do
                if [[ $devtype == crypt ]]; then
                    # handle cryptdevice
                    sdoptions="${sdoptions} cryptdevice=UUID=$(blkid -o value -s UUID "$(cryptsetup status "${devname}" | grep device | awk '{print $2}')"):${devname}"
                    if [[ ${DISCARD,,} == "yes" ]]; then
                        sdoptions="${sdoptions}:allow-discard"
                    fi
                fi
            done < <(lsblk -nslo NAME,TYPE /dev/disk/by-uuid/"${top_level_uuid}" 2> /dev/null)

            # if LINUX_USE_DEVICE_FOR_RESUME is enabled, pass its identifier to the `resume` kernel parameter
            if [[ -n ${LINUX_USE_DEVICE_FOR_RESUME,,} ]]; then
                sdoptions="${sdoptions} resume=${LINUX_USE_DEVICE_FOR_RESUME}"
            fi

            # if LINUX_USE_SWAP_FOR_RESUME is enabled, pass the UUID of the first detected swap device as an argument to the `resume` kernel parameter
            if [[ ${LINUX_USE_SWAP_FOR_RESUME,,} == "yes" ]]; then
                swapdev=$(swapon --show=NAME --noheadings | head -1)
                if [[ -n ${swapdev} ]]; then
                    swapdev_uuid=$(blkid -o value -s UUID "${swapdev}")
                    sdoptions="${sdoptions} resume=UUID=${swapdev_uuid}"
                fi
            fi

            # handle ucode
            ucode=""
            while read -r ucodefile; do
                # if located in EFI, make sure to grab the Manjaro version
                [[ $ucodefile =~ ^"${esp}/EFI/" ]] && { ! echo "${ucodefile}" | grep -iq "${ENTRY_ROOT}"; } && continue
                ucode="${ucode}initrd\t${ucodefile}\n"
            done < <(find "${esp}" -maxdepth 6 -type f -iname "*ucode.img" -printf "/%P\n")

            # when remove existing is set we want to start from an empty slate
            if [[ ${REMOVE_EXISTING,,} == "yes" ]]; then
                while read -r entry; do
                    remove_entry "${entry}"
                done < <(find "${esp}/loader/entries" -type f -name "*.conf")
            fi

            # create entries for each installed kernel
            while read -r kernel; do
                kernelnum=$(basename -- "${kernel}" | awk -F- '{print $2}')
                arch=$(basename -- "${kernel}" | awk -F- '{print $3}')

                # if installed in EFI, where multiple distro's can reside, check if distro is Manjaro
                [[ $kernel =~ ^"${esp}/EFI/" ]] && { ! echo "${kernel}" | grep -iq "${ENTRY_ROOT}"; } && continue

                # first validate we don't already have an entry for this kernel
                [[ ${OVERWRITE_EXISTING,,} != "yes" && -f $(get_entry_root "$esp" "$kernelnum")${kernelnum}.conf ]] && continue

                title=${ENTRY_TITLE}
                if [[ ${ENTRY_APPEND_KVER,,} == "yes" ]]; then
                    title="${title} ${kernelnum}"
                fi

                initramfs=$(find "${esp}" -maxdepth 5 -type f -name "initramfs-${kernelnum}-${arch}.img" -printf "/%P\n")
                initramfs_fallback=$(find "${esp}" -maxdepth 5 -type f -name "initramfs-${kernelnum}-${arch}-fallback.img" -printf "/%P\n")

                echo -e "title\t${title}\nlinux\t${kernel}\n${ucode}initrd\t${initramfs}\noptions\t${sdoptions} ${LINUX_OPTIONS}" > "$(get_entry_root "$esp" "$kernelnum").conf"
                echo -e "title\t${title}\nlinux\t${kernel}\n${ucode}initrd\t${initramfs}\noptions\t${sdoptions} ${LINUX_FALLBACK_OPTIONS}" > "$(get_entry_root "$esp" "$kernelnum")-fallback.conf"

            done < <(find "${esp}" -maxdepth 5 -type f -name "${KERNEL_PATTERN}" -printf "/%P\n")

            # set the default entry in loader.conf
            entryroot=$(get_entry_root "${esp}")
            if [[ ${DEFAULT_ENTRY} == "latest" ]]; then
                defentry=$(find "${entryroot%/*}" -maxdepth 6 -type f -name "${entryroot##*/}*" -printf "%P\n" | grep -v 'fallback.conf$' | sort -Vr | head -1)
                sed '/^default/{h;s/.*/default '"${defentry%.*}"'/};${x;/^$/{s//default '"${defentry%.*}"'/;H};x}' -i "${esp}/loader/loader.conf"
            elif [[ ${DEFAULT_ENTRY} == "oldest" ]]; then
                defentry=$(find "${entryroot%/*}" -maxdepth 6 -type f -name "${entryroot##*/}*" -printf "%P\n" | grep -v 'fallback.conf$' | sort -V | head -1 )
                sed '/^default/{h;s/.*/default '"${defentry%.*}"'/};${x;/^$/{s//default '"${defentry%.*}"'/;H};x}' -i "${esp}/loader/loader.conf"
            fi
        else
            echo "Error: ${esp}/loader/entries does not exist"
        fi
    else
        echo "Error: ${esp}/loader/loader.conf does not exist"
    fi
}

# removes entries for kernels which are no longer installed
remove_orphan_entries() {
    [[ ${REMOVE_OBSOLETE,,} != "yes" ]] && return

    # get the esp path
    esp=$(bootctl -p)

    # find and remove all the entries with unmatched kernels
    for kernel in $(comm -13 <(find "${esp}" -maxdepth 6 -type f -name "${KERNEL_PATTERN}" -printf "/%P\n" | uniq | sort) <(cat "${esp}"/loader/entries/* | grep -i "^linux" | awk '{print $2}' | uniq | sort)); do
        while read -r entry; do
            # If entry belongs to another distro, don't remove it
            { ! echo "${entry}" | grep -iq "${ENTRY_ROOT}"; } && continue
            remove_entry "${entry}"
        done < <(grep -l "${kernel}" "${esp}"/loader/entries/*)
    done
}

# make sure we are root
if [[ $EUID -ne 0 ]]; then
   echo "sdboot-manage must be run as root"
   exit 1
fi

$bootctl status &> /dev/null
if [[ $? == 1 && $1 != "setup" ]]; then
    echo -e "systemd-boot not installed\nTry sdboot-manage setup to install"
    exit 1
fi

case $1 in
    autogen)
        [[ ${NO_AUTOGEN} != "yes" ]] && generate_entries
        ;;
    autoupdate)
        [[ ${NO_AUTOUPDATE} != "yes" ]] && $bootctl update
        ;;
    gen)
        generate_entries
        ;;
    remove)
        remove_orphan_entries
        ;;
    setup)
        setup_sdboot
        ;;
    update)
        $bootctl update
        ;;
    *)
        usage
        ;;
        
esac

exit 0
